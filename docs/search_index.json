[
["working-with-data-in-r.html", "Topic 4 Working with data in R 4.1 By the end of this section, you will be able to: 4.2 In this section, we will use the Tidyverse set of packages 4.3 Import data into R from excel, SPSS and csv files 4.4 Understanding objects in R 4.5 Identify different data structures and variable types 4.6 Working with dataframes 4.7 Order, filter and group data 4.8 Create new variables from data", " Topic 4 Working with data in R 4.1 By the end of this section, you will be able to: Import data into R from excel, SPSS and csv files Save data to objects Identify different data structures and variable types Convert variables from one type to another Order, filter and group data Summarise data Create new variables from data 4.2 In this section, we will use the Tidyverse set of packages A ‘toolkit’ of packages that are very useful for organsing and manipulating data We will use the haven package to import SPSS files We will use the dplyr to organise data Also includes the ggplot2 and tidyR packages which we will use later To install: install.packages(“tidyverse”) (See the previous section on installing packages) 4.3 Import data into R from excel, SPSS and csv files We can import data from a range of sources using the Import Dataset button in the Environment tab: Importing data It is also possible to import data using code, for example: # importing a .csv file library(readr) studentData &lt;- read_csv(&quot;Datasets/studentData.csv&quot;) #importing an SPSS file library(haven) mySPSSData &lt;- read_sav(&quot;Datasets/salesData.sav&quot;) Once the data are imported, it will be visible in the environment: Imported data in the environment 4.4 Understanding objects in R In R, an object is anything that is saved to memory. For example, we might do some analysis: mean(happiness) However, in the example above, the result would appear in the console but not be saved anywhere. To store the result for reuse later, we save it to an object: happinessMean &lt;- mean(happiness) In the above code (reading left to right): We name the object “happinessMean”. This name can be anything we want. The arrow means that the result of the code on the right will be saved to the object on the left. The code on the right of the arrow calculates the mean of happiness data When this code is run, happinessMean will be stored in the environment window: Result of a calculation in the environment To recall an object from the environment, we can simply type its name. For example: happinessMean Its important to note that anything can be stored as an object in R and recalled later. This includes, dataframes, the results of statistical calculations, plots etc. 4.5 Identify different data structures and variable types 4.5.1 Data structures There are many different types of data that R can work with. The most common type of data for most people tends to be a dataframe. A dataframe is what you might consider a “normal” 2-dimensional dataset, with rows of data and columns of variables: A dataframe example R can also use other data types. A vector is a one-dimensional set of values: # a vector example scores &lt;- c(1,4,6,8,3,4,6,7) A matrix is a multi-dimensional set of values. The below example is a 3-dimensional matrix, there are 2 groups of 2 rows and 3 columns: ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 7 9 11 ## [2,] 8 10 12 We will primarily work with dataframes (and sometimes vectors), as this is how the data in psychology research is usually structured. 4.5.2 Variable types With numerical data, there are 4 key data types: Nominal (a category, group or factor) Ordinal (a ranking) Interval (scale data that can include negative values) Ratio (scale data that cannot include negative values) R can use all of these variable types: Nominal variables are called factors Ordinal variables are called ordered factors Interval and ratio variables are called numeric data and can sometimes be called integers (if they are only whole numbers) or doubles (if they all have decimal points) R can also use other data types such as text (character) data. 4.5.3 Convert variables from one type to another When we first import data into R, it might not recognise the data types correctly. For example, in the below data, we can see the intervention variable : ## participant intervention happiness ## 1 3 1 7.180105 ## 2 9 2 7.582577 ## 3 19 1 8.125716 ## 4 14 1 8.237892 ## 5 10 2 9.157891 ## 6 1 1 9.387977 ## 7 11 1 9.507135 ## 8 13 1 9.852060 ## 9 4 1 10.296773 ## 10 17 1 10.332402 In the intervention variable, the numbers 1 and 2 refer to different intervention groups. Therefore, the variable is a factor variable. To ensure that R understands this, we can resave the intervention variable as a factor using the as.factor() function: happinessSample$intervention &lt;- as.factor(happinessSample$intervention) 4.6 Working with dataframes Dataframes are the more standard data format that were are used to (think of how a dataset looks in SPSS or Excel). In a dataframe, variables are columns and each row usually reperesents one measurement or one participant. 4.6.1 View dataframe To view a dataframe, we can click on it in the environment window and it will display: Clicking on datasets in hte environment will open them up for viewing Viewing a dataframe 4.6.2 Refer to variables (columns) in a dataframe Columns in a dataframe are accessed using the “$” sign. For example, to access the happiness column in the happinessSample dataframe, we would type: happinessSample$happiness ## [1] 9.387977 10.463651 7.180105 10.296773 11.731345 12.852604 11.821646 11.059485 7.582577 ## [10] 9.157891 9.507135 10.984933 9.852060 8.237892 12.358210 11.275948 10.332402 11.705352 ## [19] 8.125716 10.925148 As we can see above, the result is then displayed. 4.7 Order, filter and group data If you have the tidyverse package loaded, it is easy to organise and filter data. arrange(happinessSample, happiness) ## participant intervention happiness ## 1 3 1 7.180105 ## 2 9 2 7.582577 ## 3 19 1 8.125716 ## 4 14 1 8.237892 ## 5 10 2 9.157891 ## 6 1 1 9.387977 ## 7 11 1 9.507135 ## 8 13 1 9.852060 ## 9 4 1 10.296773 ## 10 17 1 10.332402 ## 11 2 2 10.463651 ## 12 20 1 10.925148 ## 13 12 2 10.984933 ## 14 8 2 11.059485 ## 15 16 1 11.275948 ## 16 18 1 11.705352 ## 17 5 1 11.731345 ## 18 7 2 11.821646 ## 19 15 2 12.358210 ## 20 6 1 12.852604 arrange(happinessSample, desc(happiness)) # Arrange in descending order ## participant intervention happiness ## 1 6 1 12.852604 ## 2 15 2 12.358210 ## 3 7 2 11.821646 ## 4 5 1 11.731345 ## 5 18 1 11.705352 ## 6 16 1 11.275948 ## 7 8 2 11.059485 ## 8 12 2 10.984933 ## 9 20 1 10.925148 ## 10 2 2 10.463651 ## 11 17 1 10.332402 ## 12 4 1 10.296773 ## 13 13 1 9.852060 ## 14 11 1 9.507135 ## 15 1 1 9.387977 ## 16 10 2 9.157891 ## 17 14 1 8.237892 ## 18 19 1 8.125716 ## 19 9 2 7.582577 ## 20 3 1 7.180105 Show clients with a happiness score of less than 4 filter(happinessSample, happiness &lt; 4) ## [1] participant intervention happiness ## &lt;0 rows&gt; (or 0-length row.names) Show Intervention group 2 with happiness scores above 7 filter(happinessSample, happiness &gt; 7 &amp; intervention == 2) ## participant intervention happiness ## 1 2 2 10.463651 ## 2 7 2 11.821646 ## 3 8 2 11.059485 ## 4 9 2 7.582577 ## 5 10 2 9.157891 ## 6 12 2 10.984933 ## 7 15 2 12.358210 Group by intervention and show the mean happiness score happinessSample %&gt;% group_by(intervention) %&gt;% summarise(mean = mean(happiness)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 2 x 2 ## intervention mean ## &lt;fct&gt; &lt;dbl&gt; ## 1 1 10.1 ## 2 2 10.5 4.8 Create new variables from data To create new variables from data, we can use the mutate() function. For example, let’s say we wanted to calculate the difference between each person’s happiness score and the mean happiness score. We could do the following: happinessSample %&gt;% mutate(difference = happiness - mean(happiness)) ## participant intervention happiness difference ## 1 1 1 9.387977 -0.85396586 ## 2 2 2 10.463651 0.22170833 ## 3 3 1 7.180105 -3.06183721 ## 4 4 1 10.296773 0.05483009 ## 5 5 1 11.731345 1.48940255 ## 6 6 1 12.852604 2.61066111 ## 7 7 2 11.821646 1.57970387 ## 8 8 2 11.059485 0.81754215 ## 9 9 2 7.582577 -2.65936508 ## 10 10 2 9.157891 -1.08405191 ## 11 11 1 9.507135 -0.73480756 ## 12 12 2 10.984933 0.74299095 ## 13 13 1 9.852060 -0.38988238 ## 14 14 1 8.237892 -2.00405060 ## 15 15 2 12.358210 2.11626747 ## 16 16 1 11.275948 1.03400529 ## 17 17 1 10.332402 0.09045986 ## 18 18 1 11.705352 1.46340954 ## 19 19 1 8.125716 -2.11622652 ## 20 20 1 10.925148 0.68320590 "]
]
